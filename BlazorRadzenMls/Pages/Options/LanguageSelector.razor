@page "/language"

@if (IsComboNotBar)
{
    <RadzenSplitButton AlwaysOpenPopup=true Text="@_btnText"
                       Click=@(args => SplBtn_Click(args, "SplitButton1"))>
        <ChildContent>
            @foreach (var i in __ml.Languages)
            {
                <RadzenSplitButtonItem Text="@__lang[i.Value]" Value="@i.Value" />
            }
        </ChildContent>
    </RadzenSplitButton>
}
else
{
    <RadzenLabel Text=@_languageLbl class="rz-color-success-dark" Style="font-weight: bold;" />

    <div class="myRadzenToggleButton">
        <RadzenToggleButton @bind-Value=@isEnglish Text=@__lang["english"] Image="@GetImagePath("english")"
                            ButtonStyle="ButtonStyle.Success" ToggleButtonStyle="ButtonStyle.Danger" />
    </div>
    <div class="myRadzenToggleButton">
        <RadzenToggleButton @bind-Value=@isBulgarian Text=@__lang["bulgarian"] Image="@GetImagePath("bulgarian")"
                            ButtonStyle="ButtonStyle.Success" ToggleButtonStyle="ButtonStyle.Danger" />
    </div>
}

@code {

    [Parameter]
    public bool IsComboNotBar { get; set; }

    // private string? appLanguage
    // {
    //     get { return __state.SiteOptions.Language; }
    //     set { __state.SiteOptions.Language = value;
    //         Task.FromResult(__state.SaveAppOptions()); }
    // }

    private string _languageLbl => __lang["Language"] + ": ";
    private string _btnText => _languageLbl + __lang[__state.SiteOptions.Language];

    private bool _isEnglish;
    private bool isEnglish
    {
        get { return _isEnglish; }
        set
        {
            _isEnglish = true;
            _isBulgarian = false;
            Task.FromResult(Language_ValueChanged(__ml.en_US.Value));
        }
    }
    private bool _isBulgarian;
    private bool isBulgarian
    {
        get { return _isBulgarian; }
        set
        {
            _isEnglish = false;
            _isBulgarian = true;
            Task.FromResult(Language_ValueChanged(__ml.bg_BG.Value));
        }
    }

    private string GetImagePath(string language)
    {
        string fileName = string.Empty;
        if (language == __ml.en_US.Value)
        {
            fileName = "usa";
        }
        else if (language == __ml.bg_BG.Value)
        {
            fileName = "bulgaria";
        }
        return $"images/{fileName}-48.png";
    }

    private void SplBtn_Click(RadzenSplitButtonItem item, string buttonName)
    {
        Language_ValueChanged(item.Value);
    }

    private async Task Language_ValueChanged(string? language)
    {
        __state.SiteOptions.Language = language;
        await __ml.ChangeLanguage(__state.SiteOptions.Language, true);
        __state.RefreshPage("LanguageSelector.razor -> LanguageChanged");
    }

    protected override void OnInitialized()
    {
        if (string.IsNullOrWhiteSpace(__state.SiteOptions.Language))
            __state.SiteOptions.Language = __ml.en_US.Value;

        if (__state.SiteOptions.Language == __ml.en_US.Value)
            _isEnglish = true;
        else if (__state.SiteOptions.Language == __ml.bg_BG.Value)
            _isBulgarian = true;
        else
            _isEnglish = true;
        
        __state.RefreshEvent += delegate { StateHasChanged(); }; //Refresh_Event;
    }
    //private void Refresh_Event(object? sender, EventArgs e) { StateHasChanged(); }

}