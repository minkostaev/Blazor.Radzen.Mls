@page "/language"

@if (IsComboNotBar)
{
    <RadzenSplitButton AlwaysOpenPopup=true Text="@_btnText"
                       Click=@(args => SplBtn_Click(args, "SplitButton1"))>
        <ChildContent>
            @for (int i = 0; i < _languages.Length; i++)
            {
                <RadzenSplitButtonItem Text="@_languages[i]" Value="@i.ToString()" />
            }
        </ChildContent>
    </RadzenSplitButton>
}
else
{
    <RadzenLabel Text=@_languageLbl class="rz-color-success-dark" Style="font-weight: bold;" />

    <div class="myRadzenToggleButton">
        <RadzenToggleButton @bind-Value=@isEnglish Text=@__lang.Keys["English"] Image="@GetImagePath("english")"
                            ButtonStyle="ButtonStyle.Success" ToggleButtonStyle="ButtonStyle.Danger" />
    </div>
    <div class="myRadzenToggleButton">
        <RadzenToggleButton @bind-Value=@isBulgarian Text=@__lang.Keys["Bulgarian"] Image="@GetImagePath("bulgarian")"
                            ButtonStyle="ButtonStyle.Success" ToggleButtonStyle="ButtonStyle.Danger" />
    </div>
}

@code {

    [Parameter]
    public bool IsComboNotBar { get; set; }

    // flgs - https://icons8.com/icon/set/flags/fluency
    private string[] _languages = ["english", "bulgarian"];
    private string? _language;

    private bool _isEnglish;
    private bool isEnglish
    {
        get { return _isEnglish; }
        set
        {
            _isEnglish = true;
            _isBulgarian = false;
            Language_ValueChanged("english");
        }
    }
    private bool _isBulgarian;
    private bool isBulgarian
    {
        get { return _isBulgarian; }
        set
        {
            _isEnglish = false;
            _isBulgarian = true;
            Language_ValueChanged("bulgarian");
        }
    }

    private string _languageLbl => __lang.Keys["Language"] + ": ";
    private string _btnText => _languageLbl + __lang.Keys[_language];
    private string GetImagePath(string lang)
    {
        string fileName = "";
        if (lang == _languages[0])
        {
            fileName = "usa";
        }
        else if (lang == _languages[1])
        {
            fileName = "bulgaria";
        }
        return $"images/{fileName}-48.png";
    }

    private void SplBtn_Click(RadzenSplitButtonItem item, string buttonName)
    {
        _language = item.Text;
        if (item != null)
        {
            switch (item.Value)
            {
                case "0":
                    __lang.SetLanguage(System.Globalization.CultureInfo.GetCultureInfo("en-US"));
                    break;
                case "1":
                    __lang.SetLanguage(System.Globalization.CultureInfo.GetCultureInfo("bg-BG"));
                    break;
                default:
                    __lang.SetLanguage(System.Globalization.CultureInfo.GetCultureInfo("en-US"));
                    break;
            }
        }
    }

    private void Language_ValueChanged(string language)
    {
        _language = __state.Language = language;
        if (_language == _languages[0])
        {
            __lang.SetLanguage(System.Globalization.CultureInfo.GetCultureInfo("en-US"));
        }
        else if (_language == _languages[1])
        {
            __lang.SetLanguage(System.Globalization.CultureInfo.GetCultureInfo("bg-BG"));
        }
        __state.RefreshPage("LanguageChanged");
    }

    protected override void OnInitialized()
    {
        _language = (string.IsNullOrWhiteSpace(__state.Language)) ? _languages[0] : __state.Language;
        if (_language == _languages[0])
        {
            _isEnglish = true;
        }
        else if (_language == _languages[1])
        {
            _isBulgarian = true;
        }

        __state.RefreshEvent += delegate { StateHasChanged(); }; //Refresh_Event;
    }
    //private void Refresh_Event(object? sender, EventArgs e) { StateHasChanged(); }

}