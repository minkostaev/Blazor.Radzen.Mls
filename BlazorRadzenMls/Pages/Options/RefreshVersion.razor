@page "/refresh"

@using BlazorRadzenMls.Models
@using System.Timers

<RadzenLabel Text=@_currentVersion class="rz-color-success-dark" Style="font-weight: bold;" />

@if (__state.NeedUpdate)
{
    <RadzenLabel Text=@_updateVersion class="rz-color-danger-dark" Style="font-weight: bold;" />
}

<RadzenButton Text="@_btnLablel" Icon="autorenew"
              ButtonStyle="ButtonStyle.Warning" Click="@ReloadApp" />

@code {

    private string _currentVersion => __lang["Current_version_is"] + ": " + AppValues.VersionClient;
    private string _updateVersion => __lang["Update_version_available"] + ": " + __state.VersionServer;
    private string _btnLablel => __state.NeedUpdate ? __lang["Update"] : __lang["Refresh"];

    private async Task ReloadApp() { await VersionReload.Reload(__js); }
    //private void ReloadApp() { navigationManager.Refresh(true); }

    //private string? version { get; set; }
    //private bool isNew { get; set; }

    //private async Task VersionStatus() => (version, isNew) = await VersionReload.IsVersionNew(__js, __nav);

    protected override async void OnInitialized()
    {
        (__state.VersionServer, __state.NeedUpdate) = await VersionReload.IsVersionNew(__js, __nav);
        // await VersionStatus();
        // __state.Timer.Elapsed += async delegate
        // {
        //     await VersionStatus();
        //     if (isNew)
        //         StateHasChanged();
        // };
        
        __state.RefreshEvent += delegate { StateHasChanged(); }; //Refresh_Event;
    }
    //private void Refresh_Event(object? sender, EventArgs e) { StateHasChanged(); }

}