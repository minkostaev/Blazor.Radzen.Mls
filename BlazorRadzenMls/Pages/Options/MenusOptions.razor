@page "/sidemenu"

@using BlazorRadzenMls.Models

<RadzenLabel Text=@_menuLbl class="rz-color-success-dark" Style="font-weight: bold;" />

<div class="myRadzenToggleButton">
    <RadzenToggleButton @bind-Value=@isTextIcon Text=@__ml["Text"] Icon="view_list" IconColor="@Colors.Series5"
                        ButtonStyle="ButtonStyle.Success" ToggleButtonStyle="ButtonStyle.Danger" />
</div>
<div class="myRadzenToggleButton">
    <RadzenToggleButton @bind-Value=@Text Text=@__ml["Text"]
                        ButtonStyle="ButtonStyle.Success" ToggleButtonStyle="ButtonStyle.Danger" />
</div>
<div class="myRadzenToggleButton">
    <RadzenToggleButton @bind-Value=@isIcon Icon="group_work" IconColor="@Colors.Series5"
                        ButtonStyle="ButtonStyle.Success" ToggleButtonStyle="ButtonStyle.Danger" />
</div>

<div>
    <label>
        <RadzenCheckBox Value="@appMenuArrow" @onclick="ArrowsChange" Style="margin: 10px 0 0 0;" />
        <RadzenLabel Text=@__ml["Show_arrows"] @onclick="ArrowsChange"
                     class="rz-color-success-dark" Style="margin: 10px 20px 0 0;" />
    </label>
    <label>
        <RadzenCheckBox Value="@appMenuMultiple" @onclick="MultipleChange" Style="margin: 10px 0 0 0;" />
        <RadzenLabel Text=@__ml["Open_multiples"] @onclick="MultipleChange"
                     class="rz-color-success-dark" Style="margin: 10px 0 0 0;" />
    </label>
</div>

<br />
<div>
    <RadzenRadioButtonList @bind-Value=@__state.SiteOptions.ApitoId TValue="int">
        <Items>
            <RadzenRadioButtonListItem Text="Somee" Value="0" />
            <RadzenRadioButtonListItem Text="Render" Value="1" />
        </Items>
    </RadzenRadioButtonList>
</div>

@code {

    //int value = __state.SiteOptions.ApitoId;

    private MenuItemDisplayStyle appMenuStyle
    {
        get { return __state.SiteOptions.Menu.MenuStyle; }
        set { __state.SiteOptions.Menu.MenuStyle = value;
            Task.FromResult(__state.SaveAppOptions()); }
    }
    private bool appMenuMultiple
    {
        get { return __state.SiteOptions.Menu.Multiple; }
        set { __state.SiteOptions.Menu.Multiple = value;
            Task.FromResult(__state.SaveAppOptions()); }
    }
    private bool appMenuArrow
    {
        get { return __state.SiteOptions.Menu.Arrow; }
        set { __state.SiteOptions.Menu.Arrow = value;
            Task.FromResult(__state.SaveAppOptions()); }
    }
    
    private string _menuLbl => $"{__ml["Menu"]}: ";

    private bool _isTextIcon;
    private bool isTextIcon
    {
        get { return _isTextIcon; }
        set
        {
            _isTextIcon = true;
            _isText = false;
            _isIcon = false;
            appMenuStyle = MenuItemDisplayStyle.IconAndText;
            __state.RefreshPage(this, "Menu text icon");
        }
    }
    private bool _isText;
    private bool Text
    {
        get { return _isText; }
        set
        {
            _isTextIcon = false;
            _isText = true;
            _isIcon = false;
            appMenuStyle = MenuItemDisplayStyle.Text;
            __state.RefreshPage(this, "Menu text");
        }
    }
    private bool _isIcon;
    private bool isIcon
    {
        get { return _isIcon; }
        set
        {
            _isTextIcon = false;
            _isText = false;
            _isIcon = true;
            appMenuStyle = MenuItemDisplayStyle.Icon;
            __state.RefreshPage(this, "Menu icon");
        }
    }

    private void ArrowsChange()
    {
        appMenuArrow = !appMenuArrow;
        __state.RefreshPage(this, "Menu arrows");
    }
    private void MultipleChange()
    {
        appMenuMultiple = !appMenuMultiple;
        __state.RefreshPage(this, "Menu multiples");
    }

    protected override void OnInitialized()
    {
        switch (appMenuStyle)
        {
            case MenuItemDisplayStyle.IconAndText:
                _isTextIcon = true;
                break;
            case MenuItemDisplayStyle.Text:
                _isText = true;
                break;
            case MenuItemDisplayStyle.Icon:
                _isIcon = true;
                break;
            default:
                _isTextIcon = true;
                break;
        }

        __state.RefreshEvent += delegate { StateHasChanged(); }; //Refresh_Event;
    }
    //private void Refresh_Event(object? sender, EventArgs e) { StateHasChanged(); }

}