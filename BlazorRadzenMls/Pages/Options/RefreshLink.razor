@page "/refresh"

@using BlazorRadzenMls.Models
@using System.Timers

<RadzenLabel Text=@_currentVersion class="rz-color-success-dark" Style="font-weight: bold;" />

@if (_needUpdate)
{
    <RadzenLabel Text=@_updateVersion class="rz-color-danger-dark" Style="font-weight: bold;" />
}

<RadzenButton Text="@_btnLablel" Icon="autorenew"
              ButtonStyle="ButtonStyle.Warning" Click="@ReloadApp" />

@code {

    private string _version = string.Empty;

    private bool _needUpdate => (AppValues.Version.StartsWith(_version)) ? false : true;

    private string _currentVersion => __lang.Keys["Current_version_is"] + ": " + AppValues.Version;
    private string _updateVersion => __lang.Keys["Update_version_available"] + ": " + _version;
    private string _btnLablel => _needUpdate ? __lang.Keys["Update"] : __lang.Keys["Refresh"];

    private async Task ReloadApp()
    {
        try { await __js.InvokeVoidAsync("reload"); }
        catch { Console.WriteLine("js reload error"); }
    }
    //private void ReloadApp() { navigationManager.Refresh(true); }

    protected override void OnInitialized()
    {
        var versionChecking = new VersionChecking(__http);
        _version = versionChecking.Version;
        versionChecking.TimerTick += delegate
        {
            _version = versionChecking.Version;
        };

        __state.RefreshEvent += delegate { StateHasChanged(); }; //Refresh_Event;
    }
    //private void Refresh_Event(object? sender, EventArgs e) { StateHasChanged(); }

}