@page "/themes"

@if (IsComboNotButton == true)
{
    <RadzenDropDown Value="@__state.Theme" Data=@RadzenTheming.Themes TValue="string"
                    ValueChanged="@((string val) => SetTheme(val))" />
}
else if (IsComboNotButton == false)
{
    <RadzenSplitButton AlwaysOpenPopup=true Text="@_btnText"
                       Click=@(args => SplBtn_Click(args, "SplitButton1"))>
        <ChildContent>
            @for (int i = 0; i < RadzenTheming.Themes.Length; i++)
            {
                <RadzenSplitButtonItem Text="@RadzenTheming.Themes[i]" Value="@i.ToString()" />
            }
        </ChildContent>
    </RadzenSplitButton>
}
else
{
    <RadzenLabel Text=@_themeLbl class="rz-color-success-dark" Style="font-weight: bold;" />

    <div class="myRadzenToggleButton">
        <RadzenToggleButton @bind-Value=@isDefault Text="default"
                            ButtonStyle="ButtonStyle.Success" ToggleButtonStyle="ButtonStyle.Danger" />
    </div>
    <div class="myRadzenToggleButton">
        <RadzenToggleButton @bind-Value=@isStandard Text="standard"
                            ButtonStyle="ButtonStyle.Success" ToggleButtonStyle="ButtonStyle.Danger" />
    </div>
    <div class="myRadzenToggleButton">
        <RadzenToggleButton @bind-Value=@isSoftware Text="software"
                            ButtonStyle="ButtonStyle.Success" ToggleButtonStyle="ButtonStyle.Danger" />
    </div>
    <div class="myRadzenToggleButton">
        <RadzenToggleButton @bind-Value=@isHumanistic Text="humanistic"
                            ButtonStyle="ButtonStyle.Success" ToggleButtonStyle="ButtonStyle.Danger" />
    </div>
    <div class="myRadzenToggleButton">
        <RadzenToggleButton @bind-Value=@isDark Text="dark"
                            ButtonStyle="ButtonStyle.Success" ToggleButtonStyle="ButtonStyle.Danger" />
    </div>
    <div class="myRadzenToggleButton">
        <RadzenToggleButton @bind-Value=@isMaterial Text="material"
                            ButtonStyle="ButtonStyle.Success" ToggleButtonStyle="ButtonStyle.Danger" />
    </div>
    
}

@code {

    [Parameter]
    public bool? IsComboNotButton { get; set; }

    private string _themeLbl => __lang["Theme"] + ": ";
    private string? _btnText;

    private bool _isDefault;
    private bool isDefault
    {
        get { return _isDefault; }
        set
        {
            _isDefault = true;
            _isStandard = false;
            _isSoftware = false;
            _isHumanistic = false;
            _isDark = false;
            _isMaterial = false;
            SetTheme("default");
        }
    }
    private bool _isStandard;
    private bool isStandard
    {
        get { return _isStandard; }
        set
        {
            _isDefault = false;
            _isStandard = true;
            _isSoftware = false;
            _isHumanistic = false;
            _isDark = false;
            _isMaterial = false;
            SetTheme("standard");
        }
    }
    private bool _isSoftware;
    private bool isSoftware
    {
        get { return _isSoftware; }
        set
        {
            _isDefault = false;
            _isStandard = false;
            _isSoftware = true;
            _isHumanistic = false;
            _isDark = false;
            _isMaterial = false;
            SetTheme("software");
        }
    }
    private bool _isHumanistic;
    private bool isHumanistic
    {
        get { return _isHumanistic; }
        set
        {
            _isDefault = false;
            _isStandard = false;
            _isSoftware = false;
            _isHumanistic = true;
            _isDark = false;
            _isMaterial = false;
            SetTheme("humanistic");
        }
    }
    private bool _isDark;
    private bool isDark
    {
        get { return _isDark; }
        set
        {
            _isDefault = false;
            _isStandard = false;
            _isSoftware = false;
            _isHumanistic = false;
            _isDark = true;
            _isMaterial = false;
            SetTheme("dark");
        }
    }
    private bool _isMaterial;
    private bool isMaterial
    {
        get { return _isMaterial; }
        set
        {
            _isDefault = false;
            _isStandard = false;
            _isSoftware = false;
            _isHumanistic = false;
            _isDark = false;
            _isMaterial = true;
            SetTheme("material");
        }
    }

    private void SetTheme(string themeName)
    {
        __state.Theme = themeName;
        Task.FromResult(RadzenTheming.SetTheme(__js, themeName));
    }

    private void SplBtn_Click(RadzenSplitButtonItem item, string buttonName)
    {
        if (item != null)
        {
            SetTheme(item.Text);
            _btnText = _themeLbl + item.Text;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        __state.Theme = await RadzenTheming.GetTheme(__js);

        _btnText = _themeLbl + __state.Theme;

        if (__state.Theme == RadzenTheming.Themes[0])
            _isDefault = true;
        else if (__state.Theme == RadzenTheming.Themes[1])
            _isStandard = true;
        else if (__state.Theme == RadzenTheming.Themes[2])
            _isSoftware = true;
        else if (__state.Theme == RadzenTheming.Themes[3])
            _isHumanistic = true;
        else if (__state.Theme == RadzenTheming.Themes[4])
            _isDark = true;
        else if (__state.Theme == RadzenTheming.Themes[5])
            _isMaterial = true;

        __state.RefreshEvent += delegate { StateHasChanged(); }; //Refresh_Event;
    }
    //private void Refresh_Event(object? sender, EventArgs e) { StateHasChanged(); }

}