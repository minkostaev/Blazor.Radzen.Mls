@if (IsComboNotButton == true)
{
    <RadzenDropDown Value="@_theme" Data=@_themes TValue="string"
                    ValueChanged="@((string val) => DropDown_ValueChanged(val))" />
}
else if (IsComboNotButton == false)
{
    <RadzenSplitButton AlwaysOpenPopup=true Text="@_btnText"
                       Click=@(args => SplBtn_Click(args, "SplitButton1"))>
        <ChildContent>
            @for (int i = 0; i < _themes.Length; i++)
            {
                <RadzenSplitButtonItem Text="@_themes[i]" Value="@i.ToString()" />
            }
        </ChildContent>
    </RadzenSplitButton>
}
else
{
    <RadzenLabel Text=@_themeLbl class="rz-color-success-dark" Style="font-weight: bold;" />

    <div>
        <RadzenToggleButton @bind-Value=@isDefault Text="default"
                            ButtonStyle="ButtonStyle.Success" ToggleButtonStyle="ButtonStyle.Danger" />
    </div>
    <div>
        <RadzenToggleButton @bind-Value=@isStandard Text="standard"
                            ButtonStyle="ButtonStyle.Success" ToggleButtonStyle="ButtonStyle.Danger" />
    </div>
    <div>
        <RadzenToggleButton @bind-Value=@isSoftware Text="software"
                            ButtonStyle="ButtonStyle.Success" ToggleButtonStyle="ButtonStyle.Danger" />
    </div>
    <div>
        <RadzenToggleButton @bind-Value=@isHumanistic Text="humanistic"
                            ButtonStyle="ButtonStyle.Success" ToggleButtonStyle="ButtonStyle.Danger" />
    </div>
    <div>
        <RadzenToggleButton @bind-Value=@isDark Text="dark"
                            ButtonStyle="ButtonStyle.Success" ToggleButtonStyle="ButtonStyle.Danger" />
    </div>
    <div>
        <RadzenToggleButton @bind-Value=@isMaterial Text="material"
                            ButtonStyle="ButtonStyle.Success" ToggleButtonStyle="ButtonStyle.Danger" />
    </div>
    
}

@code {

    [Parameter]
    public bool? IsComboNotButton { get; set; }

    private string _themeLbl => langService.Keys["Theme"] + ": ";
    private string? _btnText;

    // free radzen themes names
    private string[] _themes = ["default", "standard", "software", "humanistic", "dark", "material"];
    private string? _theme;

    private bool _isDefault;
    private bool isDefault
    {
        get { return _isDefault; }
        set
        {
            _isDefault = true;
            _isStandard = false;
            _isSoftware = false;
            _isHumanistic = false;
            _isDark = false;
            _isMaterial = false;
            Task.FromResult(DropDown_ValueChanged("default"));
        }
    }
    private bool _isStandard;
    private bool isStandard
    {
        get { return _isStandard; }
        set
        {
            _isDefault = false;
            _isStandard = true;
            _isSoftware = false;
            _isHumanistic = false;
            _isDark = false;
            _isMaterial = false;
            Task.FromResult(DropDown_ValueChanged("standard"));
        }
    }
    private bool _isSoftware;
    private bool isSoftware
    {
        get { return _isSoftware; }
        set
        {
            _isDefault = false;
            _isStandard = false;
            _isSoftware = true;
            _isHumanistic = false;
            _isDark = false;
            _isMaterial = false;
            Task.FromResult(DropDown_ValueChanged("software"));
        }
    }
    private bool _isHumanistic;
    private bool isHumanistic
    {
        get { return _isHumanistic; }
        set
        {
            _isDefault = false;
            _isStandard = false;
            _isSoftware = false;
            _isHumanistic = true;
            _isDark = false;
            _isMaterial = false;
            Task.FromResult(DropDown_ValueChanged("humanistic"));
        }
    }
    private bool _isDark;
    private bool isDark
    {
        get { return _isDark; }
        set
        {
            _isDefault = false;
            _isStandard = false;
            _isSoftware = false;
            _isHumanistic = false;
            _isDark = true;
            _isMaterial = false;
            Task.FromResult(DropDown_ValueChanged("dark"));
        }
    }
    private bool _isMaterial;
    private bool isMaterial
    {
        get { return _isMaterial; }
        set
        {
            _isDefault = false;
            _isStandard = false;
            _isSoftware = false;
            _isHumanistic = false;
            _isDark = false;
            _isMaterial = true;
            Task.FromResult(DropDown_ValueChanged("material"));
        }
    }

    private async Task DropDown_ValueChanged(string val)
    {
        try { await jsRuntime.InvokeVoidAsync("setRadzenTheme", val); }
        catch { Console.WriteLine("js method error"); }
    }

    private async Task SplBtn_Click(RadzenSplitButtonItem item, string buttonName)
    {
        if (item != null)
        {
            await DropDown_ValueChanged(item.Text);
            _btnText = _themeLbl + item.Text;
        }
    }

    protected override async Task OnInitializedAsync()
    {
        try { _theme = await jsRuntime.InvokeAsync<string>("getRadzenTheme"); }
        catch { _isDefault = true; Console.WriteLine("js method error"); }

        _btnText = _themeLbl + _theme;

        if (_theme == _themes[0])
            _isDefault = true;
        else if (_theme == _themes[1])
            _isStandard = true;
        else if (_theme == _themes[2])
            _isSoftware = true;
        else if (_theme == _themes[3])
            _isHumanistic = true;
        else if (_theme == _themes[4])
            _isDark = true;
        else if (_theme == _themes[5])
            _isMaterial = true;

        appState.RefreshEvent += delegate { StateHasChanged(); }; //Refresh_Event;
    }
    //private void Refresh_Event(object? sender, EventArgs e) { StateHasChanged(); }

}

@* requirements: *@
@* @inject IJSRuntime jsRuntime *@
@* function setRadzenTheme(val) {
    let links = document.head.getElementsByTagName('link');
    for (let li of links) {
        if (li.href.includes('_content/Radzen.Blazor/css/')) {
            let css = li.href.split('/').slice(-1)[0];
            let newLink = li.href.replace(css, val + '-base.css');
            li.href = newLink;
        }
    }
} *@
@* in index.html
<link rel="stylesheet" href="_content/Radzen.Blazor/css/default-base.css">
<script src="js/myRadzen.js"></script> - js code is in here *@