@page "/upload"

@if (byteArr != null)
{
    <RadzenImage Path="@($"data:image/jpeg;base64,{Convert.ToBase64String(byteArr)}")" AlternateText="logo" Style="width: 200px; height: 200px;" />
}

<div class="file-uploader">
    <InputFile style="display: none;" id="fileInput" OnChange="@OnInputFileChange" accept="image/*" />
    <label for="fileInput" class="custom-button">
        <span>Choose</span>
    </label>
</div>

<RadzenImage Path="images/box.jpg" AlternateText="css box" />


<RadzenText Text="4 values - padding: top right bottom left;" TextStyle="TextStyle.Body1" class="rz-color-primary" />
<RadzenText Text="2 values - margin: top/bottom left/right" TextStyle="TextStyle.Body1" class="rz-color-primary" />

<hr style="color: Gray; height: 10px;" />
<div style="page-break-after: always"> </div>

<code>
    <pre>
.class {
    color: #red;
}
    </pre>
</code>

<input type="checkbox" id="nav-toggle" />
<label for="nav-toggle">Test toggle</label>

@code {

    private string? byteStr { get; set; }
    private byte[]? byteArr { get; set; }
    private async Task OnInputFileChange(InputFileChangeEventArgs args)
    {
        byteArr = await GetContentAsync(args.File);
        ///byteStr = "data:image/png;base64," + Convert.ToBase64String(qq.ToArray(), 0, qq.ToArray().Length);
    }
    private async Task<byte[]> GetContentAsync(IBrowserFile file)
    {
        await using var stream = file.OpenReadStream(long.MaxValue);
        var content = new byte[file.Size];
        await stream.ReadAsync(content, 0, content.Length);
        return content;
    }

}