@page "/weather"

@using BlazorRadzenMls.Contracts
@using BlazorRadzenMls.Layout.Third

@inject IApito apito

@layout ThirdLayout

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

<NavLink class="nav-link" href="">
    <span class="bi bi-list-nested-nav-menu" aria-hidden="true"></span> Home
</NavLink>

@code {

    // do to
    private string? _requestUri => "https://www.apito.somee.com/weatherforecasta";
    //private string? _requestUri => "https://localhost:7088/weatherforecasta";
    private HttpClient? _client;
    private async Task GetFromMyApi()
    {
        // if (_client != null)
        // {
        //     //object? result;
        //     try { forecasts = await _client.GetFromJsonAsync<WeatherForecast[]>(_requestUri); }
        //     catch { Console.WriteLine("HttpClient error"); }
        // }
        forecasts = await apito.GetSomethingAsync();
    }
    //--


    private WeatherForecast[]? forecasts;

    protected override async Task OnInitializedAsync()
    {
        _client = new HttpClient();
        //try { forecasts = await __http.GetFromJsonAsync<WeatherForecast[]>("data/weather.json"); }
        //catch { Console.WriteLine("weather.json is missing"); }
        await GetFromMyApi();
    }

    // private class WeatherForecast
    // {
    //     public DateOnly Date { get; set; }
    //     public int TemperatureC { get; set; }
    //     public string? Summary { get; set; }
    //     public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
    // }

}