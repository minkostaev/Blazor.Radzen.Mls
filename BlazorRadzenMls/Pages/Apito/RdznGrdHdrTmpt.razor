@using BlazorRadzenMls.Models

<RadzenButton Text="@__lang["Reload"]" Icon="autorenew" Click="() => Clear.InvokeAsync(true)"
              ButtonStyle="ButtonStyle.Secondary" IsBusy="@BusyDelete" />
<RadzenButton Text="@__lang["Delete"]" Icon="delete_forever" Click="@DeleteConfirm"
              ButtonStyle="ButtonStyle.Danger" Disabled="@DisabledDelete" IsBusy="@BusyDelete" />
<RadzenSplitButton Text="@DeselectText" Disabled="@DisabledDelete" Click="() => Clear.InvokeAsync()"
                   Icon="cached" ButtonStyle="ButtonStyle.Primary" IsBusy="@BusyDelete">
    <ChildContent>
        @if (Selected != null)
        {
            <div class="drop-down-panel">
                @foreach (var itm in Selected)
                {
                    <RadzenText TextStyle="TextStyle.Body2"
                                Style="display: flex; white-space: nowrap; text-overflow: ellipsis;">
                        @SelectLabel(@itm)
                        <RadzenIcon Icon="done" IconColor="var(--rz-dropdown-open-background-color)" />
                    </RadzenText>
                }
            </div>
        }
    </ChildContent>
</RadzenSplitButton>

<RadzenSplitButton Text="@__lang["More"]" Icon="list" ButtonStyle="ButtonStyle.Info"
                   IsBusy="@BusyDelete" AlwaysOpenPopup="true">
    <ChildContent>
        <div class="drop-down-panel">
            <RadzenAccordion>
                <Items>
                    <RadzenAccordionItem Text="@TimeText" Icon="alarm">
                        @toolTipText
                    </RadzenAccordionItem>
                </Items>
            </RadzenAccordion>
            @if (ColumnsNames != null && columnsChecked != null)
            {
                @foreach (var itm in ColumnsNames)
                {
                    <div>
                        <RadzenCheckBox @bind-Value=columnsChecked![itm.Key] TValue="bool"
                                        Change="() => Columns_Change(itm.Key, columnsChecked![itm.Key])" />
                        <RadzenLabel Text="@itm.Value" class="rz-color-success-dark"
                                     @onclick="() => CheckBox_Change(itm.Key)" />
                    </div>
                }
            }
        </div>
    </ChildContent>
</RadzenSplitButton>

@code {

    [Parameter]
    public IList<string>? Selected { get; set; }

    [Parameter]
    public Dictionary<string, string>? ColumnsNames { get; set; }

    [Parameter]
    public Dictionary<string, long>? Times { get; set; }

    [Parameter]
    public bool BusyDelete { get; set; }

    [Parameter]
    public bool DisabledDelete { get; set; }

    [Parameter]
    public EventCallback<bool> Clear { get; set; }

    [Parameter]
    public EventCallback<bool> Delete { get; set; }

    [Parameter]
    public EventCallback<KeyValuePair<string, bool>> ColumnsChange { get; set; }

    private Dictionary<string, bool>? columnsChecked;

    private string DeselectText => DisabledDelete ? __lang["Deselect"] : __lang["Deselect"] + " [" + Selected?.Count + "]";
    private string TimeText => __lang["Last action time"] + ": " + totolTime;

    private string? totolTime
    {
        get
        {
            if (Times == null)
                return null;
            if (Times.Count > 0)
                return AppStatic.FormatMilliseconds(Times.Values.Sum());
            return string.Empty;
        }
    }
    private string? toolTipText
    {
        get
        {
            if (Times == null)
                return null;
            string result = string.Empty;
            foreach (var t in Times)
            {
                string delimeter = (string.IsNullOrEmpty(result)) ? string.Empty : " + ";
                result += $"{delimeter}{t.Key}: {t.Value} ms";
            }
            return result;
        }
    }

    private int i;
    private string? SelectLabel(string text)
    {
        int number = i + 1;
        string result = $"[{number}] {text}";
        if (Selected!.Count - 1 == i)
            i = 0;
        else
            i++;
        return result;
    }

    private async Task DeleteConfirm()
    {
        bool shouldDelete = true;
        var options = new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No" };
        bool? confirm = await __dialog.Confirm("Are you sure?", "Delete", options);
        if (confirm != true || Selected == null)
        {
            shouldDelete = false;
        }
        await Delete.InvokeAsync(shouldDelete);
    }

    private async Task CheckBox_Change(string id)
    {
        columnsChecked![id] = !columnsChecked![id];
        await Columns_Change(id, columnsChecked![id]);
    }
    private async Task Columns_Change(string name, bool newValue)
    {
        var val = new KeyValuePair<string, bool>(name, newValue);
        await ColumnsChange.InvokeAsync(val);
    }


    protected override async Task OnInitializedAsync()
    {
        string firstVar = string.Empty;
        string secondVar = string.Empty;
        string thirdVar = string.Empty;
        if (ColumnsNames != null)
        {
            columnsChecked = new Dictionary<string, bool>();
            foreach (var c in ColumnsNames)
            {
                columnsChecked.Add(c.Key, true);
                if (string.IsNullOrEmpty(firstVar))
                    firstVar = c.Key;
                else if (string.IsNullOrEmpty(secondVar))
                    secondVar = c.Key;
                else if (string.IsNullOrEmpty(thirdVar))
                    thirdVar = c.Key;
            }
        }
        bool isMobileDevice = false;
        try { isMobileDevice = await __js.InvokeAsync<bool>("isMobileDevice"); }
        catch { Console.WriteLine("js error: MachinesLogsPage.razor -> OnInitializedAsync"); }
        if (columnsChecked != null && columnsChecked.Count > 2)
        {
            columnsChecked![firstVar] = isMobileDevice;
            columnsChecked![secondVar] = false;
            columnsChecked![thirdVar] = !isMobileDevice;
            await Columns_Change(firstVar, columnsChecked![firstVar]);
            await Columns_Change(secondVar, columnsChecked![secondVar]);
            await Columns_Change(thirdVar, columnsChecked![thirdVar]);
        }
    }

}