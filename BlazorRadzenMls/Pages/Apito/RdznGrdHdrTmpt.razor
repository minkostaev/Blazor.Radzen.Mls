@using BlazorRadzenMls.Models

<RadzenButton Text="@__lang["Reload"]" Icon="autorenew" Click="() => Clear.InvokeAsync(true)"
              ButtonStyle="ButtonStyle.Info" IsBusy="@BusyDelete" />
<RadzenButton Text="@__lang["Delete"]" Icon="delete_forever" Click="@DeleteConfirm"
              ButtonStyle="ButtonStyle.Danger" Disabled="@DisabledDelete" IsBusy="@BusyDelete" />
<RadzenSplitButton Text="@DeselectText" Disabled="@DisabledDelete" Click="() => Clear.InvokeAsync()"
                   Icon="cached" ButtonStyle="ButtonStyle.Info" IsBusy="@BusyDelete">
    <ChildContent>
        @if (Selected != null)
        {
            <div class="drop-down-panel">
                @foreach (var itm in Selected)
                {
                    <RadzenText TextStyle="TextStyle.Body2"
                                Style="display: flex; white-space: nowrap; text-overflow: ellipsis;">
                        @SelectLabel(@itm)
                        <RadzenIcon Icon="done" IconColor="var(--rz-dropdown-open-background-color)" />
                    </RadzenText>
                }
            </div>
        }
    </ChildContent>
</RadzenSplitButton>

<RadzenSplitButton Text="@__lang["More"]" Icon="cached" ButtonStyle="ButtonStyle.Info" IsBusy="@BusyDelete">
    <ChildContent>
        <div class="drop-down-panel">
            <div>
                <RadzenLabel Text="@__lang["Last action time: "]" class="rz-color-success-dark" />
                <RadzenText Text="@totolTime" MouseEnter="@(args => ShowTooltip(args))"
                            TextStyle="TextStyle.Body1" class="rz-color-primary" Style="display: inline-block; text-decoration: underline;" />
            </div>
            <div>
                <RadzenCheckBox Name="chkBxDensity" @bind-Value=@density TValue="bool" Change="@BtnToggle" />
                <RadzenLabel Component="chkBxDensity" Text="@__lang["Compact view"]" class="rz-color-success-dark" />
            </div>
        </div>
    </ChildContent>
</RadzenSplitButton>

@* <RadzenToggleButton @bind-Value=@density Text="Compact" Change="@BtnToggle"
                    ButtonStyle="ButtonStyle.Info" ToggleButtonStyle="ButtonStyle.Primary" /> *@

@* <RadzenText Text="@totolTime" MouseEnter="@(args => ShowTooltip(args))"
            TextStyle="TextStyle.Body1" class="rz-color-primary" Style="display: inline-block; text-decoration: underline;" /> *@


@code {

    [Parameter]
    public IList<string>? Selected { get; set; }

    [Parameter]
    public Dictionary<string, long>? Times { get; set; }

    [Parameter]
    public bool BusyDelete { get; set; }

    [Parameter]
    public bool DisabledDelete { get; set; }

    [Parameter]
    public EventCallback<bool> Clear { get; set; }

    [Parameter]
    public EventCallback<bool> Delete { get; set; }

    [Parameter]
    public EventCallback<bool> Compact { get; set; }

    private string DeselectText => DisabledDelete ? @__lang["Deselect"] : @__lang["Deselect"] + " [" + Selected!.Count + "]";

    private bool density;
    private string? totolTime
    {
        get
        {
            if (Times == null)
                return null;
            if (Times.Count > 0)
                return AppStatic.FormatMilliseconds(Times.Values.Sum());
            return string.Empty;
        }
    }
    private string? toolTipText
    {
        get
        {
            if (Times == null)
                return null;
            string result = string.Empty;
            foreach (var t in Times)
            {
                string delimeter = (string.IsNullOrEmpty(result)) ? string.Empty : " + ";
                result += $"{delimeter}{t.Key}: {t.Value} ms";
            }
            return result;
        }
    }

    private async Task DeleteConfirm()
    {
        bool shouldDelete = true;
        var options = new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No" };
        bool? confirm = await __dialog.Confirm("Are you sure?", "Delete", options);
        if (confirm != true || Selected == null)
        {
            shouldDelete = false;
        }
        await Delete.InvokeAsync(shouldDelete);
    }

    private int i;
    private string? SelectLabel(string text)
    {
        int number = i + 1;
        string result = $"[{number}] {text}";
        if (Selected!.Count - 1 == i)
            i = 0;
        else
            i++;
        return result;
    }

    private void ShowTooltip(ElementReference elementReference)
    {
        var options = new TooltipOptions() { Position = TooltipPosition.Bottom };
        __tooltip.Open(elementReference, toolTipText, options);
    }

    private async Task BtnToggle(bool newValue)
    {
        await Compact.InvokeAsync(newValue);
    }

    protected override async Task OnInitializedAsync()
    {
        bool isMobileDevice = false;
        try { isMobileDevice = await __js.InvokeAsync<bool>("isMobileDevice"); }
        catch { Console.WriteLine("js error: MachinesLogsPage.razor -> OnInitializedAsync"); }
        await BtnToggle(isMobileDevice);
        density = isMobileDevice;
    }

}