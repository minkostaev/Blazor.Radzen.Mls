@attribute [Route(AppValues.PageMachinesLogs)]

@attribute [Authorize]
@* @attribute [Authorize(Roles = "administrator, manager")] *@
@* @attribute [Authorize(Policy = "admin-policy")] *@

@using BlazorRadzenMls.Models

@inject IApito _apito

<RadzenText Text="@__lang["Machines Logs"]" TextStyle="TextStyle.H4" class="rz-color-primary" />

@if (dataLogs != null)
{
    <RadzenDataGrid @ref="grid" Data="@dataLogs" TItem="MachinesLogs" @bind-Value="selectedLogs"
                    PageSize="10" AllowPaging="true" AllowSorting="true" IsLoading="@busyDelete"
                    PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                    AllowFiltering="true" FilterMode="FilterMode.Advanced" Density="@density"
                    SelectionMode="DataGridSelectionMode.Multiple">
        <HeaderTemplate>
            <RdznGrdHdrTmpt BusyDelete="@busyDelete" DisabledDelete="@disabledDelete"
                            Selected="@selectedValues" Times="@times"
                            Clear="@Clear" Delete="@DeleteLogs" Compact="@ToggleCompact" />
        </HeaderTemplate>
        
        <Template Context="logs">
            <RadzenCard Style="margin-bottom:20px">
                Company: <b>@logs.Hash</b>
            </RadzenCard>
        </Template>
        
        <Columns>
            <RadzenDataGridColumn Width="40px" Sortable="false" Filterable="false" Visible="@visibleCheckboxColumn">
                <HeaderTemplate>
                    <RadzenCheckBox TriState="false" TValue="bool?"
                                    Value="@(selectedLogs == null || selectedLogs?.Any() != true ? false : !dataLogs.All(i => selectedLogs.Select(e => e.Id).Contains(i.Id)) ? null : dataLogs.Any(i => selectedLogs.Select(e => e.Id).Contains(i.Id)))"
                                    Change="@(args => selectedLogs = args == true ? (selectedLogs ?? Enumerable.Empty<MachinesLogs>()).Union(dataLogs.Where(i => !(selectedLogs ?? Enumerable.Empty<MachinesLogs>()).Select(e => e.Id).Contains(i.Id))).ToList() : null)" />
                </HeaderTemplate>
                <Template Context="data">
                    <RadzenCheckBox TriState="false" TValue="bool"
                                    Value="@(selectedLogs != null && selectedLogs.Select(e => e.Id).Contains(data.Id))" />
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Property="@nameof(MachinesLogs.Value)" Title="Executed" />
            <RadzenDataGridColumn Property="@nameof(MachinesLogs.Api)" Title="Api" Width="100px" />
            <RadzenDataGridColumn Property="@nameof(MachinesLogs.Desktop)" Title="Desktop" Width="100px" />
            <RadzenDataGridColumn Property="@nameof(MachinesLogs.Date)" Title="Date" FormatString="{0:d}" Width="100px" />
        </Columns>
    </RadzenDataGrid>
}
else
{
    @if (waitingRequest)
    {
        <div class="loader">Loading...</div>
    }
    else
    {
        @ResponseText
    }
}

@code {

    private bool disabledDelete => (selectedLogs == null || selectedLogs!.Count == 0) ? true : false;
    private bool busyDelete;
    
    private RadzenDataGrid<MachinesLogs>? grid;
    private MachinesLogs[]? dataLogs;
    private IList<MachinesLogs>? selectedLogs;
    private IList<string>? selectedValues
    {
        get
        {
            if (selectedLogs == null)
                return null;
            return (from s in selectedLogs select s.Value).ToList();
        }
    }

    private Density density = Density.Default;
    private bool visibleCheckboxColumn;

    private bool waitingRequest;
    private string? ResponseText;
    private Dictionary<string, long>? times;

    private async Task DeleteLogs(bool shouldDelete)
    {
        busyDelete = true;
        if (!shouldDelete)
        {
            busyDelete = false;
            return;
        }
        times = null;
        await DeleteLogsFromApi();
        DeleteLogsFromGrid();
        busyDelete = false;
    }
    private async Task DeleteLogsFromApi()
    {
        var ids = selectedLogs!.Select(p => p.Id).ToArray();
        var response = await _apito.DeleteMachinesLogs(ids!);
        times = new Dictionary<string, long>()
        {
            { "Request", response.RequestTime }
        };
    }
    private void DeleteLogsFromGrid()
    {
        var oldData = dataLogs!.ToList();
        foreach (var item in selectedLogs!)
        {
            var log = oldData.Where(p => p.Id == item.Id).FirstOrDefault();
            if (log == null)
                break;
            oldData.Remove(log);
        }
        dataLogs = oldData.ToArray();
        selectedLogs = null;
    }

    private async Task Clear(bool reload = false)
    {
        waitingRequest = true;
        selectedLogs = null;
        if (reload)
        {
            dataLogs = null;
            await GetMachinesLogs();
            // grid.Reset(true);
            // await grid.FirstPage(true);
        }
        waitingRequest = false;
    }

    private async Task GetMachinesLogs()
    {
        waitingRequest = true;
        Response response = await _apito.GetMachinesLogs();
        dataLogs = (MachinesLogs[]?)response.Result;
        times = new Dictionary<string, long>()
        {
            { "Request", response.RequestTime },
            { "Deserialize", response.DeserializeTime }
        };
        ResponseText = response.Status.ToString();
        waitingRequest = false;
    }

    private void ToggleCompact(bool newValue)
    {
        density = (newValue) ? Density.Compact : Density.Default;
    }

    protected override async Task OnInitializedAsync()
    {
        await GetMachinesLogs();
        bool isMobileDevice = false;
        try { isMobileDevice = await __js.InvokeAsync<bool>("isMobileDevice"); }
        catch { Console.WriteLine("js error: MachinesLogsPage.razor -> OnInitializedAsync"); }
        visibleCheckboxColumn = !isMobileDevice;
    }

}