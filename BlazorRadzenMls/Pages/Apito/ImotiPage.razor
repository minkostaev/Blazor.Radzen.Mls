@attribute [Route(AppValues.PageImoti)]

@using BlazorRadzenMls.Models

@inject IApitoService _apito

<RadzenText Text="@__ml["Imoti"]" TextStyle="TextStyle.H4" class="rz-color-primary" />

@if (dataImoti != null)
{
    <RadzenDataGrid @ref="grid" Data="@dataImoti" TItem="ImotMongo" ValueChanged="@grid_ValueChanged"
                    PageSize="10" AllowPaging="true" AllowSorting="true" AllowAlternatingRows="false"
                    PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                    AllowFiltering="true" AllowColumnResize="true" FilterMode="FilterMode.CheckBoxList">
        <HeaderTemplate>
            @* <RdznGrdHdrTmpt /> *@
            @time
            <RadzenButton Text="GoToPage" Click="@GoToPage" />
        </HeaderTemplate>
        <Columns>
            <RadzenDataGridColumn Property="@nameof(Imot.Label)" Title="Label" />
            <RadzenDataGridColumn Property="@nameof(Imot.Location)" Title="Location" />
            <RadzenDataGridColumn Property="@nameof(Imot.Type)" Title="Type" />
            <RadzenDataGridColumn Property="@nameof(Imot.Agent)" Title="Agent" />
            <RadzenDataGridColumn Property="@nameof(Imot.Domain)" Title="Domain" />
            <RadzenDataGridColumn Property="@nameof(Imot.Price)" Title="Price" Width="70px" Resizable="false" />
            <RadzenDataGridColumn Context="cntx" Title="@nameof(Imot.Link)"
                                  Filterable="false" Sortable="false" Resizable="false" Width="50px">
                <Template Context="cntx">
                    <RadzenButton Icon="open_in_new" ButtonStyle="ButtonStyle.Light"
                                  Variant="Variant.Flat" Size="ButtonSize.Medium"
                                  Click="() => __js.OpenNewTab(cntx.Link!, this)" />
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>

    <ImotiForm IsNew="@isNew" NewImot="@newImot" SelectedImot="@selectedImot" Method="@Imot_Form" />
}
else
{
    <div class="loader">Loading...</div>
}

@code {

    private bool isNew = true;

    private RadzenDataGrid<ImotMongo>? grid;
    private ImotMongo[]? dataImoti;
    private ImotMongo? selectedImot;
    private ImotMongo? newImot;

    private string? time;
    private int PageIndex = 0;

    private void grid_ValueChanged(object items)
    {
        PageIndex = grid!.CurrentPage;
        var itemsList = items as List<ImotMongo>;
        if (itemsList == null || itemsList.Count == 0)
            return;
        selectedImot = itemsList[0];
        isNew = false;
    }

    private async Task Imot_Form(HttpMethod httpMethod)
    {
        if (httpMethod == HttpMethod.Post)
        {
            isNew = true;
            await PostImot();
        }
        else if (httpMethod == HttpMethod.Put)
        {
            await EditImot();
        }
        else if (httpMethod == HttpMethod.Delete)
        {
            await Delete();
        }
    }

    private async Task GetImoti()
    {
        Response response = await _apito.GetImoti();
        dataImoti = (ImotMongo[]?)response.Result;

        long total = response.RequestTime + response.DeserializeTime;
        time = $"[{response.RequestTime}ms {response.DeserializeTime}ms] {AppStatic.FormatMilliseconds(total)}";
    }

    private async Task PostImot()
    {
        await _apito.PostImoti(newImot!);
        newImot = new ImotMongo();
        await Clear();
    }
    private async Task EditImot()
    {
        if (selectedImot == null)
            return;
        await _apito.PostImoti(selectedImot!, true);
        await Clear();
    }
    private async Task Delete()
    {
        var options = new ConfirmOptions() { OkButtonText = "Yes", CancelButtonText = "No" };
        bool? confirm = await __dialog.Confirm("Are you sure?", "Delete", options);
        if (confirm == true)
        {
            await _apito.DeleteImot(selectedImot!.Id);
            await Clear();
        }
    }
    private async Task Clear()
    {
        // waitingRequest = true;
        selectedImot = null;
        dataImoti = null;
        await GetImoti();
        //waitingRequest = false;
    }

    protected override async Task OnInitializedAsync()
    {
        newImot = new ImotMongo();
        await GetImoti();
    }

    private async Task GoToPage()
    {
        await grid.GoToPage(PageIndex);
    }

}