@attribute [Route(AppValues.PageMachinesDetails)]

@attribute [Authorize]

@using BlazorRadzenMls.Models
@using Forms.Wpf.Mls.Tools.Models.TheMachine

@inject IApito _apito

<RadzenText Text="@__lang["Machines Details"]" TextStyle="TextStyle.H4" class="rz-color-primary" />

@if (dataLogs != null)
{
    <RadzenDataGrid @ref="grid" Data="@dataLogs" TItem="MachineDb" @bind-Value="selectedLogs"
                    PageSize="10" AllowPaging="true" AllowSorting="true"
                    PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true"
                    AllowFiltering="true" FilterMode="FilterMode.Advanced"
                    SelectionMode="DataGridSelectionMode.Multiple">
        <HeaderTemplate>
            <RdznGrdHdrTmpt />
            @time
        </HeaderTemplate>
        <Template Context="item">

            <RdznGrdRowTmpt Item="@item" />

        </Template>
        <Columns>
            <RadzenDataGridColumn Property="@nameof(MachineDb.Hash)" Title="User" />
            <RadzenDataGridColumn Property="Client.User" Title="User" />
            <RadzenDataGridColumn Property="Client.Machine" Title="Machine" />
            <RadzenDataGridColumn Property="Client.Domain" Title="Desktop" />
            <RadzenDataGridColumn Property="Client.Path" Title="Path" />
        </Columns>
    </RadzenDataGrid>
}
else
{
    <div class="loader">Loading...</div>
}

@code {

    RadzenDataGrid<MachineDb>? grid;
    private MachineDb[]? dataLogs;
    private IList<MachineDb>? selectedLogs;

    private string? time;

    protected override async Task OnInitializedAsync()
    {
        Response response = await _apito.GetMachinesDetails();
        dataLogs = (MachineDb[]?)response.Result;

        long total = response.RequestTime + response.DeserializeTime;
        time = $"[{response.RequestTime}ms {response.DeserializeTime}ms] {AppStatic.FormatMilliseconds(total)}";
    }


}