<CascadingAuthenticationState>
    <Router AppAssembly="@typeof(App).Assembly">
        <Found Context="routeData">
            <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@__state.CurrentLayoutType">
                <Authorizing>
                    <RadzenLabel Text="Getting user information, please wait." class="rz-color-success-dark" />
                    <LoaderBar />
                </Authorizing>
                <NotAuthorized>
                    NO USER
                    @* <h1>Sorry</h1>
                    <p>You're not authorized to reach this page. You need to log in.</p> *@
                    @* @if (context.User.Identity?.IsAuthenticated != true)
                    {
                    <RedirectToLogin />
                    }
                    else
                    {
                    <p role="alert">You are not authorized to access this resource.</p>
                    } *@
                </NotAuthorized>
            </AuthorizeRouteView>
            <FocusOnNavigate RouteData="@routeData" Selector="h1" />
        </Found>
        <NotFound>
            <PageTitle>Not found</PageTitle>
            <LayoutView Layout="@__state.CurrentLayoutType">
                <RadzenLabel Text="This address doesn't have content." class="rz-color-success-dark" />
                <img alt="404" src="/images/browser-404.svg" style="width: 100%; height: 90%;" />
            </LayoutView>
        </NotFound>
        <Navigating>
            <LoaderBar />
        </Navigating>
    </Router>
</CascadingAuthenticationState>

@code {

    protected override async Task OnInitializedAsync()
    {
        await __state.LoadAppOptions();
        await __theme.UseIsDarkLightProperty(__state.SiteOptions.Theme);
        __state.SiteOptions.Theme = await __theme.SetTheme(__state.SiteOptions.Theme);
        await __ml.ChangeLanguage(__state.SiteOptions.Language);

        __nav.LocationChanged += async (object? sender, LocationChangedEventArgs e) =>
        {
            ///string navigationMethod = e.IsNavigationIntercepted ? "HTML" : "code";
            ///Console.WriteLine($"Notified of navigation via {navigationMethod} to {e.Location}");
            __state.SiteOptions.Page = e.Location.Substring(__nav.BaseUri.Length);
            await __state.SaveAppOptions();
            if (string.IsNullOrEmpty(__state.SiteOptions.Page))
            {//update home page
                __state.RefreshPage(this, "__nav.LocationChanged");
            }
        };

        __ver.DifferenceEvent += delegate
        {
            ///__ver.Reload();
            __state.RefreshPage(this, "__ver.DifferenceEvent");
            ShowNotificationUpdate();
        };

        __state.RefreshPage(this, "OnInitializedAsync");//await InvokeAsync(StateHasChanged);
    }

    private void ShowNotificationUpdate()
    {
        __notify.Notify(new NotificationMessage
        {
            Severity = NotificationSeverity.Info,
            Duration = 40000,
            SummaryContent = ns => @<RadzenText TextStyle="TextStyle.H6">@__ml["New version available"]</RadzenText>,
            DetailContent = ns => @<RadzenButton Text="@__ml["Update"]" Click="@(() => AppStatic.Refresh(__ver, __dialog, __ml))" />
            ///DetailContent = ns => @<RadzenButton Text="@__ml["Update"]" Click="@(args => ns.Messages.Clear())" />
        });
    }

    protected override void OnInitialized()
    {
        __state.RefreshEvent += delegate { StateHasChanged(); }; //Refresh_Event;
    }
    //private void Refresh_Event(object? sender, EventArgs e) { StateHasChanged(); }

}