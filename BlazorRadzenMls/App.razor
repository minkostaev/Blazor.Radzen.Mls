<CascadingAuthenticationState>
    <Router AppAssembly="@typeof(App).Assembly">
        <Found Context="routeData">
            <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)">
                <Authorizing>
                    <RadzenLabel Text="Getting user information, please wait." class="rz-color-success-dark" />
                    <div class="loader">Loading...</div>
                </Authorizing>
                <NotAuthorized>
                    NO USER
                    @* <h1>Sorry</h1>
                    <p>You're not authorized to reach this page. You need to log in.</p> *@
                    @* @if (context.User.Identity?.IsAuthenticated != true)
                    {
                    <RedirectToLogin />
                    }
                    else
                    {
                    <p role="alert">You are not authorized to access this resource.</p>
                    } *@
                </NotAuthorized>
            </AuthorizeRouteView>
            <FocusOnNavigate RouteData="@routeData" Selector="h1" />
        </Found>
        <NotFound>
            <PageTitle>Not found</PageTitle>
            <LayoutView Layout="@typeof(MainLayout)">
                <RadzenLabel Text="This address doesn't have content." class="rz-color-success-dark" />
                <img alt="404" src="/images/browser-404.svg" style="width: 100%; height: 90%;" />
            </LayoutView>
        </NotFound>
        <Navigating>
            <div class="loader">Loading...</div>
        </Navigating>
    </Router>
</CascadingAuthenticationState>

@code {
    protected override async Task OnInitializedAsync()
    {
        await __state.LoadAppOptions(__local);
        MultiLanguage.ChangeLanguage(__lang, __state.SiteOptions.Language);
        await RadzenTheming.SetTheme(__js, __state.SiteOptions.Theme);
        __nav.LocationChanged += async (object? sender, LocationChangedEventArgs e) =>
        {
            ///string navigationMethod = e.IsNavigationIntercepted ? "HTML" : "code";
            ///Console.WriteLine($"Notified of navigation via {navigationMethod} to {e.Location}");
            __state.SiteOptions.Page = e.Location.Substring(__nav.BaseUri.Length);
            await __state.SaveAppOptions(__local);
            __state.RefreshPage("__nav.LocationChanged");
        };

        __state.RefreshPage("App.razor");//await InvokeAsync(StateHasChanged);
    }
}