@using System.Timers;
@using BlazorRadzenMls.Auth
@using BlazorRadzenMls.Models

<RadzenLink Path="">
    <RadzenButton Size="ButtonSize.Large" ButtonStyle="ButtonStyle.Info" Variant="Variant.Text"
                  Icon="home" IconColor="@Colors.Series8" Style="font-weight: 1000; font-size: 30px;" />
</RadzenLink>

<RadzenLink Path="@AppValues.PageOptions" style="position: relative;">
    <RadzenButton Size="ButtonSize.Large" ButtonStyle="ButtonStyle.Info" Variant="Variant.Text"
                  Icon="build" IconColor="@Colors.Series8" Style="font-weight: 1000; font-size: 30px;" />
    <RadzenIcon Icon="warning" IconColor="red" Visible="@__state.NeedUpdate"
                Style="font-size: 16px; position: absolute; top: 26px; left: 10px; z-index: -1;" />
</RadzenLink>

<RadzenLink Path="@AppValues.GitHubMy" target="_blank" >
    <RadzenButton Size="ButtonSize.Large" ButtonStyle="ButtonStyle.Info" Variant="Variant.Text"
                  Icon="description" IconColor="@Colors.Series8" Style="font-weight: 1000; font-size: 30px;"
                  MouseEnter="@(args => ShowTooltip(args))" />
</RadzenLink>

<div style="margin-left: auto;">
    <MenuGravatar />
</div>

@code {

    private void ShowTooltip(ElementReference elementReference)
    {
        var options = new TooltipOptions() { Position = TooltipPosition.Bottom };
        __tooltip.Open(elementReference, "GitHub", options);
    }

    protected override void OnInitialized()
    {
        
        __state.RefreshEvent += delegate { StateHasChanged(); }; //Refresh_Event;
    }
    //private void Refresh_Event(object? sender, EventArgs e) { StateHasChanged(); }

}