@using System.Timers;
@using BlazorRadzenMls.Auth
@using BlazorRadzenMls.Models

<RadzenLink Path="">
    <RadzenButton Size="ButtonSize.Large" ButtonStyle="ButtonStyle.Info" Variant="Variant.Text"
                  Icon="home" IconColor="@Colors.Series8" Style="font-weight: 1000; font-size: 30px;" />
</RadzenLink>

<RadzenLink Path="@AppValues.PageOptions">
    <RadzenButton Size="ButtonSize.Large" ButtonStyle="ButtonStyle.Info" Variant="Variant.Text"
                  Icon="build" IconColor="@Colors.Series8" Style="font-weight: 1000; font-size: 30px;" class=@_className />
</RadzenLink>

<RadzenLink Path="@AppValues.GitHubMy" target="_blank" >
    <RadzenButton Size="ButtonSize.Large" ButtonStyle="ButtonStyle.Info" Variant="Variant.Text"
                  Icon="description" IconColor="@Colors.Series8" Style="font-weight: 1000; font-size: 30px;"
                  MouseEnter="@(args => ShowTooltip(args))" />
</RadzenLink>

<div style="margin-left: auto;">
    <MenuGravatar />
</div>


@code {

    private string _className = "";

    private void ShowTooltip(ElementReference elementReference)
    {
        var options = new TooltipOptions() { Position = TooltipPosition.Bottom };
        __tooltip.Open(elementReference, "GitHub", options);
    }

    protected override void OnInitialized()
    {
        __state.Timer.Elapsed += async delegate
        {
            (string version, bool isNew) = await VersionReload.IsVersionNew(__js, __nav);
            if (isNew)
            {
                __state.VersionServer = version;
                if (_className != "rz-background-color-danger-lighter")
                {
                    _className = "rz-background-color-danger-lighter";
                    StateHasChanged();
                }
            }
            else
            {
                if (_className != "")
                {
                    _className = "";
                    StateHasChanged();
                }
            }
        };

        __state.RefreshEvent += delegate { StateHasChanged(); }; //Refresh_Event;
    }
    //private void Refresh_Event(object? sender, EventArgs e) { StateHasChanged(); }

}