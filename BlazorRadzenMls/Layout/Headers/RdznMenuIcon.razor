@using BlazorRadzenMls.Models

<div style="display: inline;">
    <div id="@menuPanelId" class="@AppValues.HtmlClassMenuIcon" style="display: none;">
        @ChildContent
    </div>
    <RadzenButton id="@menuToggleId" Icon="@Name" Click="@LinkOrMenu"
                  Variant="Variant.Text" ButtonStyle="ButtonStyle.Info"
                  Style="@buttonStyle" />
</div>

@code {

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public int Size { get; set; } = 33;

    [Parameter]
    public string Name { get; set; } = "menu";

    [Parameter]
    public string? NavigateTo { get; set; }

    [Parameter]
    public bool OnNewTab { get; set; }

    [Parameter]
    public bool ExpectRefresh { get; set; }

    private string buttonStyle
    {
        get
        {
            string result = "width: 50px; height: 50px; border-right: var(--rz-profile-menu-border);";
            if (ExpectRefresh && __ver.NeedUpdate)
                return $"{result} color: {Colors.Warning};";
            return result;
        }
    }

    private string menuToggleId = "menuToggle" + Guid.NewGuid().ToString();
    private string menuPanelId = "menuPanel" + Guid.NewGuid().ToString();

    private async Task LinkOrMenu()
    {
        if (NavigateTo != null)
        {
            if (OnNewTab)
                await __js.OpenNewTab(NavigateTo, this, "ShowMenuPanel");
            else
                __nav.NavigateTo(NavigateTo);
        }
        else
        {
            await __js.ShowMenuPanel(menuPanelId, AppValues.HtmlClassMenuIcon, "inline", this, "ShowMenuPanel");
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await __js.ChangeSidebarToggle(menuToggleId, Size, this, "OnAfterRenderAsync");
        }
    }

    protected override void OnInitialized()
    {
        
        __state.RefreshEvent += delegate { StateHasChanged(); }; //Refresh_Event;
    }
    //private void Refresh_Event(object? sender, EventArgs e) { StateHasChanged(); }

}