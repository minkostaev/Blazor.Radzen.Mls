<RadzenPanelMenu Style="overflow: auto; max-height: calc(100vh - var(--heightHeaderFooter));"
                 DisplayStyle="@__state.SiteOptions.Menu.MenuStyle"
                 Multiple="@__state.SiteOptions.Menu.Multiple"
                 ShowArrow="@__state.SiteOptions.Menu.Arrow">

    <RadzenPanelMenuItem Text="МинцЪт" Image="images/icon-128.png" />

    <RadzenPanelMenuItem Text="@txtTheme" Icon="@ThemeIcon(false)">
        <RadzenPanelMenuItem Text="@__ml["Light"]" Click="() => ThemeDark_Click(false)"
                             Icon="light_mode" IconColor="@IconColor(__theme.IsDark == false)"
                             Style="@ThemeStyle(__theme.IsDark == false)" />
        <RadzenPanelMenuItem Text="@__ml["Dark"]" Click="() => ThemeDark_Click(true)"
                             Icon="dark_mode" IconColor="@IconColor(__theme.IsDark == true)"
                             Style="@ThemeStyle(__theme.IsDark == true)" />
        <hr style="margin:0;" />
        @foreach (string thm in __theme.ThemesBasic)
        {
            <RadzenPanelMenuItem Text="@__ml[thm]" Click="() => Theme_Click(thm)"
                                 Icon="@ThemeIcon(__state.SiteOptions.Theme == __theme.CheckForDarkTheme(thm))"
                                 IconColor="@IconColor(__state.SiteOptions.Theme == __theme.CheckForDarkTheme(thm))"
                                 Style="@ThemeStyle(__state.SiteOptions.Theme == __theme.CheckForDarkTheme(thm))" />
        }
    </RadzenPanelMenuItem>

    <RadzenPanelMenuItem Text="@txtLanguage" Icon="language">
        @foreach (var l in __ml.Languages)
        {
            <RadzenPanelMenuItem Text="@__ml[l.Value]"
                                 Image="@AppStatic.GetImagePath(__state.SiteOptions.Language == l.Value ? string.Empty : l.Value, __ml)"
                                 Icon="@IconDone(__state.SiteOptions.Language == l.Value)"
                                 IconColor="@IconColor(__state.SiteOptions.Language == l.Value)"
                                 Click="() => Language_Click(l.Value)"
                                 Style="@IconColor(__state.SiteOptions.Language == l.Value)" />
        }
    </RadzenPanelMenuItem>

    <RadzenPanelMenuItem Text="@__ml["Menu options"]" Icon="menu">
        <RadzenPanelMenuItem Text="@__ml["Icon and text"]" Icon="view_list"
                             IconColor="@MenuColor(MenuItemDisplayStyle.IconAndText)"
                             Click="() => Menu_Click(MenuItemDisplayStyle.IconAndText)"
                             Style="@MenuColor(MenuItemDisplayStyle.IconAndText)" />
        <RadzenPanelMenuItem Text="@__ml["Text only"]" Icon="description"
                             IconColor="@MenuColor(MenuItemDisplayStyle.Text)"
                             Click="() => Menu_Click(MenuItemDisplayStyle.Text)"
                             Style="@MenuColor(MenuItemDisplayStyle.Text)" />
        <RadzenPanelMenuItem Text="@__ml["Icon only"]" Icon="group_work"
                             IconColor="@MenuColor(MenuItemDisplayStyle.Icon)"
                             Click="() => Menu_Click(MenuItemDisplayStyle.Icon)"
                             Style="@MenuColor(MenuItemDisplayStyle.Icon)" />
        <hr style="margin:0;" />
        <RadzenPanelMenuItem Text="@__ml["Show_arrows"]" Icon="assignment_returned"
                             Click="() => MultipleArrows_Click(true)"
                             IconColor="@IconColor(__state.SiteOptions.Menu.Arrow)"
                             Style="@IconColor(__state.SiteOptions.Menu.Arrow)" />
        <hr style="margin:0;" />
        <RadzenPanelMenuItem Text="@__ml["Open_multiples"]" Icon="list"
                             Click="() => MultipleArrows_Click(false)"
                             IconColor="@IconColor(__state.SiteOptions.Menu.Multiple)"
                             Style="@IconColor(__state.SiteOptions.Menu.Multiple)" />
    </RadzenPanelMenuItem>

    <RadzenPanelMenuItem Text="@txtVersion" IconColor="@clrIcon" Icon="info">
        <RadzenPanelMenuItem Text="@btnReload" Icon="autorenew" IconColor="@clrIcon"
                             Click="@(() => AppStatic.Refresh(__ver, __dialog, __ml))" Style="@clrStyle" />
    </RadzenPanelMenuItem>

</RadzenPanelMenu>

@code {

    private string txtTheme => $"{__ml["Theme"]}: {AppStatic.FirstLetterToUpper(__state.SiteOptions.Theme)}";
    private string ThemeIcon(bool selected) => selected ? "done" : "perm_media";
    private string ThemeStyle(bool color) => color ? $"{IconColor(color)}; text-transform: capitalize;" : "text-transform: capitalize;";

    private string IconColor(bool color) => color ? "color: " + Colors.Info : string.Empty;

    private string IconDone(bool done) => done ? "done" : string.Empty;
    private string txtLanguage => __ml["Language"] + ": " + __ml[__state.SiteOptions.Language];

    private string MenuColor(MenuItemDisplayStyle style) => IconColor(style == __state.SiteOptions.Menu.MenuStyle);

    private string txtVersion => __ml["Version"] + ": " + __ver.VersionProject;
    private string lblVersion => __ml["New_version"] + ": " + __ver.VersionWwwroot;
    private string btnReload => __ver.NeedUpdate ? __ml["Update"] + ": " + __ver.VersionWwwroot : __ml["Refresh"];
    private string clrIcon => __ver.NeedUpdate ? Colors.Warning : string.Empty;
    private string clrStyle => string.IsNullOrEmpty(clrIcon) ? string.Empty : "color: " + clrIcon;

    private async Task Theme_Click(string? theme)
    {
        if (__state.SiteOptions.Theme == theme)
            return;
        await __theme.SetTheme(theme, true);
    }
    private async Task ThemeDark_Click(bool isDark)
    {
        if (__theme.IsDark == isDark)
            return;
        string? name = await __theme.GetTheme();
        __theme.IsDark = isDark;
        await __theme.SetTheme(name, true);
    }

    private async Task Language_Click(string? language)
    {
        if (__state.SiteOptions.Language == language)
            return;
        await __ml.ChangeLanguage(language, true);
        __state.RefreshPage("RdznMenuOptions.razor -> Language_ValueChanged");
    }

    private async Task Menu_Click(MenuItemDisplayStyle style)
    {
        if (__state.SiteOptions.Menu.MenuStyle == style)
            return;
        __state.SiteOptions.Menu.MenuStyle = style;
        __state.RefreshPage("RdznMenuOptions.razor -> Menu_Click");
        await __state.SaveAppOptions();
    }
    private async Task MultipleArrows_Click(bool isArrows)
    {
        if (isArrows)
            __state.SiteOptions.Menu.Arrow = !__state.SiteOptions.Menu.Arrow;
        else
            __state.SiteOptions.Menu.Multiple = !__state.SiteOptions.Menu.Multiple;
        __state.RefreshPage("RdznMenuOptions.razor -> MultipleArrows_Click");
        await __state.SaveAppOptions();
    }

    protected override void OnInitialized()
    {

        __state.RefreshEvent += delegate { StateHasChanged(); }; //Refresh_Event;
    }
    //private void Refresh_Event(object? sender, EventArgs e) { StateHasChanged(); }

}