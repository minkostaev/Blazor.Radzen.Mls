@using BlazorRadzenMls.Layout.RdznProfileMenus
@using BlazorRadzenMls.CustomComponents
@inherits BaseComponent

<RadzenPanelMenu Style="overflow: auto; max-height: calc(100vh - var(--heightHeaderFooter));"
                 DisplayStyle="@__state.SiteOptions.Menu.MenuStyle"
                 Multiple="@__state.SiteOptions.Menu.Multiple"
                 ShowArrow="@__state.SiteOptions.Menu.Arrow">

    <RadzenPanelMenuItem Text="МинцЪт" Image="images/icon-128.png" />

    <RadzenPanelMenuItem Text="@txtTheme" Icon="@isDarkIcon">
        <RadzenPanelMenuItem Visible="false"/>
        <RdznThemesButtons />
    </RadzenPanelMenuItem>

    <RadzenPanelMenuItem Text="@txtLanguage" Icon="language">
        <RadzenPanelMenuItem Visible="false" />
        <RdznLanguageButtons />
    </RadzenPanelMenuItem>

    <RadzenPanelMenuItem Text="@__ml["Menu options"]" Icon="menu">
        <RadzenPanelMenuItem Text="@__ml["Icon and text"]" Icon="view_list"
                             IconColor="@MenuColor(MenuItemDisplayStyle.IconAndText)"
                             Click="() => Menu_Click(MenuItemDisplayStyle.IconAndText)"
                             Style="@MenuColor(MenuItemDisplayStyle.IconAndText)" />
        <RadzenPanelMenuItem Text="@__ml["Text only"]" Icon="description"
                             IconColor="@MenuColor(MenuItemDisplayStyle.Text)"
                             Click="() => Menu_Click(MenuItemDisplayStyle.Text)"
                             Style="@MenuColor(MenuItemDisplayStyle.Text)" />
        <RadzenPanelMenuItem Text="@__ml["Icon only"]" Icon="group_work"
                             IconColor="@MenuColor(MenuItemDisplayStyle.Icon)"
                             Click="() => Menu_Click(MenuItemDisplayStyle.Icon)"
                             Style="@MenuColor(MenuItemDisplayStyle.Icon)" />
        <hr style="margin:0;" />
        <RadzenPanelMenuItem Text="@__ml["Show_arrows"]" Icon="assignment_returned"
                             Click="() => MultipleArrows_Click(true)"
                             IconColor="@AppStatic.IconColor(__state.SiteOptions.Menu.Arrow)"
                             Style="@AppStatic.IconColorStyle(__state.SiteOptions.Menu.Arrow)" />
        <hr style="margin:0;" />
        <RadzenPanelMenuItem Text="@__ml["Open_multiples"]" Icon="list"
                             Click="() => MultipleArrows_Click(false)"
                             IconColor="@AppStatic.IconColor(__state.SiteOptions.Menu.Multiple)"
                             Style="@AppStatic.IconColorStyle(__state.SiteOptions.Menu.Multiple)" />
    </RadzenPanelMenuItem>

    <RadzenPanelMenuItem Text="@txtVersion" IconColor="@clrIcon" Icon="info">
        <RadzenPanelMenuItem Text="@btnReload" Icon="autorenew" IconColor="@clrIcon"
                             Click="@(() => AppStatic.Refresh(__ver, __dialog, __ml))" Style="@clrStyle" />
    </RadzenPanelMenuItem>

</RadzenPanelMenu>

@code {

    private string isDarkIcon => (__theme.IsDark == true) ? "dark_mode" : "light_mode";
    private string txtTheme => $"{__ml["Theme"]}: {AppStatic.FirstLetterToUpper(__theme.ThemeNameAlwaysLight(__state.SiteOptions.Theme))}";

    private string txtLanguage => __ml["Language"] + ": " + __ml[__state.SiteOptions.Language];

    private string MenuColor(MenuItemDisplayStyle style) => AppStatic.IconColorStyle(style == __state.SiteOptions.Menu.MenuStyle);

    private string txtVersion => __ml["Version"] + ": " + __ver.VersionProject;
    private string lblVersion => __ml["New_version"] + ": " + __ver.VersionWwwroot;
    private string btnReload => __ver.NeedUpdate ? __ml["Update"] + ": " + __ver.VersionWwwroot : __ml["Refresh"];
    private string clrIcon => __ver.NeedUpdate ? Colors.Warning : string.Empty;
    private string clrStyle => string.IsNullOrEmpty(clrIcon) ? string.Empty : "color: " + clrIcon;

    private async Task Menu_Click(MenuItemDisplayStyle style)
    {
        if (__state.SiteOptions.Menu.MenuStyle == style)
            return;
        __state.SiteOptions.Menu.MenuStyle = style;
        __state.RefreshPage(this, "Menu_Click");
        await __state.SaveAppOptions();
    }
    private async Task MultipleArrows_Click(bool isArrows)
    {
        if (isArrows)
            __state.SiteOptions.Menu.Arrow = !__state.SiteOptions.Menu.Arrow;
        else
            __state.SiteOptions.Menu.Multiple = !__state.SiteOptions.Menu.Multiple;
        __state.RefreshPage(this, "MultipleArrows_Click");
        await __state.SaveAppOptions();
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

}