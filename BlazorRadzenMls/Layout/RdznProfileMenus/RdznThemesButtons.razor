@using BlazorRadzenMls.CustomComponents
@inherits BaseComponent

<div style="text-align: center;">
    <RadzenButton Click="() => ThemeDark_Click(false)"
                  Variant="Variant.Text" ButtonStyle="ButtonStyle.Primary"
                  Style="@ThemeDarkStyle(__theme.IsDark == false)">
        <RadzenIcon Icon="light_mode" IconColor="@AppStatic.IconColor(__theme.IsDark == false)" />
    </RadzenButton>
    <RadzenButton Click="() => ThemeDark_Click(true)"
                  Variant="Variant.Text" ButtonStyle="ButtonStyle.Primary"
                  Style="@ThemeDarkStyle(__theme.IsDark == true)">
        <RadzenIcon Icon="dark_mode" IconColor="@AppStatic.IconColor(__theme.IsDark == true)" />
    </RadzenButton>
</div>
<hr style="margin:0;" />
@foreach (string thm in __theme.ThemesBasic)
{
    <RadzenButton Text="@__ml[thm]" Click="() => Theme_Click(thm)"
                  Variant="Variant.Text" ButtonStyle="ButtonStyle.Primary"
                  Icon="@ThemeIcon(__state.SiteOptions.Theme == __theme.CheckForDarkTheme(thm))"
                  IconColor="@AppStatic.IconColor(__state.SiteOptions.Theme == __theme.CheckForDarkTheme(thm))"
                  Style="@ThemeListStyle(__state.SiteOptions.Theme == __theme.CheckForDarkTheme(thm))" />
}

@code {

    private string ThemeIcon(bool selected) => selected ? "done" : "perm_media";

    private string ThemeListStyle(bool color) => color ? $"{AppStatic.IconColorStyle(color)}; {style}" : style;
    private string style => "text-transform: capitalize; display: block; width: 100%;";

    private string ThemeDarkStyle(bool color) => color ? $"{AppStatic.IconColorStyle(color)} {style2}" : style2;
    private string style2 => "text-transform: capitalize; width: 44%;";

    private async Task Theme_Click(string? theme)
    {
        if (__state.SiteOptions.Theme == theme)
            return;
        string name = await __theme.SetTheme(theme);
        __state.SiteOptions.Theme = name;
        await __state.SaveAppOptions();
        __state.RefreshPage(this, "Theme_Click");
    }
    private async Task ThemeDark_Click(bool isDark)
    {
        if (__theme.IsDark == isDark)
            return;
        string? name = __theme.ThemeExist(__state.SiteOptions.Theme!) ? __state.SiteOptions.Theme : await __theme.GetTheme();
        __theme.IsDark = isDark;
        name = await __theme.SetTheme(name);
        __state.SiteOptions.Theme = name;
        await __state.SaveAppOptions();
        __state.RefreshPage(this, "ThemeDark_Click");
    }

    protected override void OnInitialized()
    {
        base.OnInitialized();
    }

}