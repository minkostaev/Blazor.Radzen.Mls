@using BlazorRadzenMls.Models

<RadzenProfileMenu>
    <Template>
        @if (isGravatar)
        {
            <RadzenGravatar Email="@email" />
        }
        else
        {
            <RadzenIcon Icon="account_box" IconColor="@Colors.Series8" Style="font-size: 30px; vertical-align: bottom;" />
        }
    </Template>
    <ChildContent>
        
        <AuthorizeView>
            <Authorized>
                <RadzenText Text=@userName TextStyle="TextStyle.Body1" class="rz-color-primary" Style="margin: 10px;font-weight: bold;" />
                <RadzenButton Text="Logout" Click="SignOut" Icon="highlight_off" Style="width: 100%;" />
            </Authorized>
            <NotAuthorized>
                <RadzenButton Text="Login" Click="SignIn" Icon="account_circle" Style="width: 100%;" />
            </NotAuthorized>
        </AuthorizeView>

        <RadzenProfileMenuItem Text="Home" Path="" Icon="home"></RadzenProfileMenuItem>
        <RadzenProfileMenuItem Text="@__lang["Options"]" Path="@AppValues.PageOptions" Icon="build"></RadzenProfileMenuItem>
        
    </ChildContent>
</RadzenProfileMenu>

@code {

    private bool isGravatar { get; set; }
    private string? email { get; set; }

    private string? userName;

    protected override async Task OnInitializedAsync()
    {
        var authstate = await __auth.GetAuthenticationStateAsync();
        var user = authstate.User;
        userName = user?.Identity?.Name;
    }

    private void SignIn() { __nav.NavigateTo("authentication/login"); }
    private async Task SignOut()
    {
        await __js.InvokeVoidAsync("sessionStorage.clear");
        __nav.NavigateTo("authentication/logout");
    }

}